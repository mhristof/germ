package sso

import (
	"strings"
	"testing"

	"github.com/MakeNowJust/heredoc"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/sso"
	"github.com/stretchr/testify/assert"
	"gopkg.in/ini.v1"
)

func TestUpdateConfig(t *testing.T) {
	cases := []struct {
		name           string
		accounts       []*sso.AccountInfo
		config         []byte
		profile        string
		expectedConfig []byte
	}{
		{
			name:    "all new configs",
			profile: "existingProfile",
			config: []byte(heredoc.Doc(`
				[profile existingProfile]
				foo = bar
			`)),
			accounts: []*sso.AccountInfo{
				&sso.AccountInfo{
					AccountName: aws.String("test"),
					AccountId:   aws.String("1234"),
				},
			},
			expectedConfig: []byte(heredoc.Doc(`
				[profile existingProfile]
				foo = bar

				; autogenerated from germ with <3
				[profile test]
				; inherited from existingProfile
				foo            = bar
				; autogenerated from germ with <3
				sso_account_id = 1234
			`)),
		},
		{
			name:    "profile to add exists",
			profile: "existingProfile",
			config: []byte(heredoc.Doc(`
				[profile existingProfile]
				foo = bar

				[profile test]
				this = that
			`)),
			accounts: []*sso.AccountInfo{
				&sso.AccountInfo{
					AccountName: aws.String("test"),
					AccountId:   aws.String("1234"),
				},
			},
			expectedConfig: []byte(heredoc.Doc(`
				[profile existingProfile]
				foo = bar

				[profile test]
				this           = that
				; autogenerated from germ with <3
				sso_account_id = 1234
			`)),
		},
	}

	for _, test := range cases {
		config, err := ini.Load(test.config)
		assert.Nil(t, err, test.name)

		expectedConfig, err := ini.Load(test.expectedConfig)

		assert.Nil(t, err, test.name)
		var expected strings.Builder
		_, err = expectedConfig.WriteTo(&expected)
		assert.Nil(t, err, test.name)

		var generated strings.Builder
		_, err = UpdateConfig(config, test.profile, test.accounts).WriteTo(&generated)
		assert.Nil(t, err, test.name)

		assert.Equal(t, expected.String(), generated.String(), test.name)
	}
}
