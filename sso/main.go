package sso

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sso"
	"github.com/mitchellh/go-homedir"
	log "github.com/sirupsen/logrus"
	"gopkg.in/ini.v1"
)

func ListAccounts() []*sso.AccountInfo {
	mySession := session.Must(session.NewSession())

	// Create a SSO client from just a session.
	svc := sso.New(mySession)

	accounts, err := svc.ListAccounts(&sso.ListAccountsInput{
		AccessToken: aws.String(accessToken()),
	})
	if err != nil {
		log.WithFields(log.Fields{
			"err": err,
		}).Error("cannot retrieve accounts")
	}

	return accounts.AccountList
}

func newSection(config *ini.File, name string) (*ini.Section, bool) {
	if section, err := config.GetSection(name); err == nil {
		return section, false
	}

	section, err := config.NewSection(name)
	if err != nil {
		log.WithFields(log.Fields{
			"err":  err,
			"name": name,
		}).Error("cannot add new section")
	}

	section.Comment = "autogenerated from germ with <3"

	return section, true
}

func UpdateConfig(config *ini.File, profile string, accounts []*sso.AccountInfo) *ini.File {
	templateProfile, err := config.GetSection(fmt.Sprintf("profile %s", profile))
	if err != nil {
		log.WithFields(log.Fields{
			"err":     err,
			"profile": profile,
		}).Error("cannot retrieve profile from config")
	}

	defaultKeys := templateProfile.KeysHash()

	for _, account := range accounts {
		prof := fmt.Sprintf("profile %s", *account.AccountName)
		section, created := newSection(config, prof)

		if created {
			for k, v := range defaultKeys {
				key, _ := section.NewKey(k, v)
				key.Comment = "inherited from " + profile
			}
		}

		key, err := section.NewKey("sso_account_id", *account.AccountId)
		if err != nil {
			log.WithFields(log.Fields{
				"err": err,
			}).Error("cannot set sso_account_id")
		}

		key.Comment = "autogenerated from germ with <3"
	}

	return config
}

type Creds struct {
	AccessToken string `json:"accessToken"`
	ExpiresAt   string `json:"expiresAt"`
	Region      string `json:"region"`
	StartURL    string `json:"startUrl"`
}

func accessToken() (ret string) {
	dir, err := homedir.Expand("~/.aws/sso/cache")
	if err != nil {
		log.WithFields(log.Fields{
			"err": err,
		}).Panic("cannot expand sso cache folder")
	}

	err = filepath.Walk(dir,
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}

			if strings.HasPrefix(info.Name(), "botocore") {
				return nil
			}

			if info, err := os.Stat(path); err == nil && info.IsDir() {
				return nil
			}

			var creds Creds
			data, err := ioutil.ReadFile(path)
			if err != nil {
				log.WithFields(log.Fields{
					"err":  err,
					"path": path,
				}).Error("cannot read file")
			}

			err = json.Unmarshal(data, &creds)
			if err != nil {
				log.WithFields(log.Fields{
					"err":  err,
					"path": path,
				}).Error("cannot unmarshal file")
			}

			log.WithFields(log.Fields{
				"path": path,
			}).Debug("found AWS access token")

			ret = creds.AccessToken

			return nil
		})
	if err != nil {
		log.WithFields(log.Fields{
			"err": err,
		}).Error("error while finding credentials")
	}

	return ret
}
